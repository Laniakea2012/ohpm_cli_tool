"use strict";var e=this&&this.__awaiter||function(e,r,t,o){return new(t||(t=Promise))((function(n,i){function s(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?n(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,a)}c((o=o.apply(e,r||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.isExactVersion=exports.resolveOverridesDependencies=exports.overridesMap=void 0;const t=require("../../config"),o=r(require("../../log")),n=r(require("path")),i=require("../../common/Constants"),s=require("../../util/FsUtil"),a=require("../../common/message"),c=require("../../tools/ohpa/Ohpa"),u=require("../locker"),d=require("../parameter"),l=require("../override-dependency-map/readProjectOhPackageJson5"),p=r(require("semver"));function f(e,r,t){const s=n.default.join(t,i.Constants.MyPackageJson),u=c.ohpa.validSpec(r,t);if(!u)throw o.default.error("EOVERRIDE",(0,a.format)(a.Messages.Overrides.InvalidSpec,{replaceSpec:r,depName:e,packageJsonPath:s})),new Error(a.Messages.Overrides.ValidSpecFailed);return u}function g(e){try{return null!==p.default.parse(e,{loose:!0})}catch(e){return!1}}exports.overridesMap=new Map,exports.resolveOverridesDependencies=function(r,a){return e(this,void 0,void 0,(function*(){"overrides"in r&&a!==t.config.getProjectRoot()&&o.default.warn("",`Only project-level "overrides" is supported. "overrides" configured at "${n.default.join(a,i.Constants.MyPackageJson)}" will be ignored.`);const c=yield function(){return e(this,void 0,void 0,(function*(){let e={};if(t.config.getProjectRoot()){const r=n.default.join(t.config.getProjectRoot(),i.Constants.MyPackageJson);if(yield s.FsUtil.exists(r)){let r=yield(0,l.readProjectOhPackageJson5)();r=yield d.ParameterizationManager.getInstance().assignParameterOnPkgJson(r),e=r.overrides||{},Object.keys(e).forEach((r=>{e[r]=f(r,e[r],t.config.getProjectRoot())}))}}return e}))}(),p=u.PackageLockerManager.getInstance();Object.keys(c).forEach((e=>{const r=f(e,c[e],a);g(r)?p.updateLockSpec(a,e,r,r):p.deleteSpecifier(a,`${e}@${r}`),c[e]=r,exports.overridesMap.set(e,r)}))}))},exports.isExactVersion=g;