"use strict";var e=this&&this.__awaiter||function(e,i,t,r){return new(t||(t=Promise))((function(n,o){function d(e){try{a(r.next(e))}catch(e){o(e)}}function l(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){var i;e.done?n(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(d,l)}a((r=r.apply(e,i||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.AsyncTreeBuilder=void 0;const t=require("../struct/dependencyTree"),r=require("../../../concurrent/ConcurrentExecutor"),n=i(require("../../../log")),o=require("../../overrides"),d=require("../struct/dependencyNode"),l=require("../util"),a=require("../dep-builder/types"),s=require("../dep-install"),c=require("../../../tools/posh"),u=require("../../locker"),p=require("../util/isInnerPkgDependency"),h=require("../../override-dependency-map/OverrideDepMapManager"),y=require("../../../common/message"),f=require("../../../util/FsUtil"),v=require("../../../tools/ohpa/OhpaType");exports.AsyncTreeBuilder=class{constructor(e){this.tree=void 0,this.builderType=(null==e?void 0:e.builderType)||a.BuilderType.ToBeInstalled,this.faultCallBack=null==e?void 0:e.faultCallback,this.resolveVersionConflict=null==e?void 0:e.resolveConflict}reset(){this.tree=void 0}getResult(){const e=this.tree;return this.reset(),e}build(i,r,n=1/0){return e(this,void 0,void 0,(function*(){this.tree=new t.DependencyTree(i,r,this.resolveVersionConflict),yield this.buildChildren(r,-1,n)}))}buildChildren(i,t,d=1/0){return e(this,void 0,void 0,(function*(){const s=r.ConcurrentExecutor.creatInstance(),c=i.name,u=i.pinnedSpec,p=(i,t)=>e(this,void 0,void 0,(function*(){var r;if(!i.isRoot&&c===i.name)throw n.default.error("Invalid dependency",`${i.name}@${i.pinnedSpec} -> ${c}@${u}`),new Error(y.Messages.DepBuilder.InvalidDependency);if(i.unmet&&this.builderType===a.BuilderType.ToBeInstalled)throw i.fault&&n.default.error("",i.fault),i.nodeData.error?i.nodeData.error:new Error("DependencyNode build failed.");if(!(t>d||(null===(r=this.tree)||void 0===r?void 0:r.findNode(i.name,i.fetchSpec))))if((0,l.isNeedChildren)(i)){i.isRoot||this.builderType!==a.BuilderType.ToBeInstalled||(yield this.installNativeDependency(i.requirements,i)),this.tree.registerNode(i);for(const r of Object.keys(i.requirements)){const n=(0,o.resolveSpecWithOverrides)(this.tree.moduleRootDir,r,i.requirements),d=i.isRoot?i.requirements[r].depType:i.depType;s.addAsyncTask((()=>e(this,void 0,void 0,(function*(){const e=yield this.createChildNode({depth:t+1,childName:r,childSpec:n,depType:d,parent:i});yield p(e,t+1)}))))}}else this.tree.registerNode(i)}));s.addAsyncTask((()=>p(i,t))),yield s.runWithErrorHandle()}))}createChildNode(i){return e(this,void 0,void 0,(function*(){const e=this.tree,t=e.whereToFindChildNode(i.childSpec,i.parent),r=yield u.PackageLockerManager.getInstance().getDepNodeData({depType:i.depType,name:i.childName,builderType:this.builderType,rootDir:e.moduleRootDir,pkg:`${i.childName}@${i.childSpec}`,where:t,parentSaveRoot:i.parent.resolveSaveRootDir(e.moduleRootDir),isLink:i.parent.isLink,isShared:i.parent.isShared}),n=yield h.OverrideDepMapManager.getInstance().getConfig(r.name,r.pinnedSpec,r.fetchSpec),o=new d.DependencyNode(r,i.depType,n);return this.handleFaultyNode(o,i.parent,i.depth-1),o}))}handleFaultyNode(e,i,t){e.unmet&&(e.fault=`missing: ${e.name}@${e.fetchSpec}, required by ${i.nodeKey}`,this.faultCallBack&&this.faultCallBack(e.fault,t),e.prefixLabel=`${c.posh.red.bgBlack("UNMET DEPENDENCY")} `)}installNativeDependency(i,t){return e(this,void 0,void 0,(function*(){const e=this.tree;for(const r of Object.keys(i)){const d=(0,o.resolveSpecWithOverrides)(e.moduleRootDir,r,i);if(d&&(0,l.isLocalDependency)(d)&&(0,p.isInnerPkgDependency)(d)&&!(yield(0,l.checkAndRemoveOldLocalPkg)(e.moduleRootDir,t))){if(n.default.debug("InstallNativePkg",`found native dependency. install parent: ${t.name}@${t.pinnedSpec}`),yield(0,s.installDependency)(e.moduleRootDir,t),t.ohpaType===v.OhpaType.File){const e=yield f.FsUtil.readModifyTime(t.pinnedSpec);u.PackageLockerManager.getInstance().updateGlobalMtimeCacheAfterInstallation(t.pinnedSpec,e)}break}}}))}};